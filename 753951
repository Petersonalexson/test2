Option Explicit

Sub RefreshSmartViewTreeInChunks_NoSave()
    On Error GoTo ErrHandler
    Dim arrSheets As Variant, wsList As Worksheet, ws As Worksheet, ConnectionName As String
    Dim Ret As Long, LastRow As Long, ConnStatus As Integer, startTime As Double
    Dim hierarchyArray As Variant, rangeName As String, logSheet As Worksheet
    Dim logRow As Long, startIndex As Long, endIndex As Long
    Dim rowsToProcess As Long, totalRows As Long, chunkSize As Long, currentRow As Long
    Dim HeaderRow As Long
    
    startTime = Timer
    chunkSize = 20
    HeaderRow = 2
    On Error Resume Next
    Set logSheet = ThisWorkbook.Sheets("ProcessLog")
    On Error GoTo ErrHandler
    If logSheet Is Nothing Then
        Set logSheet = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        logSheet.Name = "ProcessLog"
        logSheet.Range("A1").Value = "Timestamp"
        logSheet.Range("B1").Value = "Sheet"
        logSheet.Range("C1").Value = "Range Name"
        logSheet.Range("D1").Value = "Action"
        logSheet.Range("E1").Value = "Status"
        logSheet.Range("F1").Value = "Details"
        logSheet.Range("A1:F1").Font.Bold = True
        logRow = 2
    Else
        Dim tmpVal
        Set wsList = Nothing
        On Error Resume Next
        Set wsList = ThisWorkbook.Sheets("Lists")
        tmpVal = wsList.Range("nmStartIndex").Value
        If IsNumeric(tmpVal) Then
            If tmpVal <= 1 Then
                logSheet.Cells.Clear
                logSheet.Range("A1").Value = "Timestamp"
                logSheet.Range("B1").Value = "Sheet"
                logSheet.Range("C1").Value = "Range Name"
                logSheet.Range("D1").Value = "Action"
                logSheet.Range("E1").Value = "Status"
                logSheet.Range("F1").Value = "Details"
                logSheet.Range("A1:F1").Font.Bold = True
                logRow = 2
            Else
                logRow = logSheet.Cells(logSheet.Rows.Count, "A").End(xlUp).Row + 1
            End If
        Else
            logRow = logSheet.Cells(logSheet.Rows.Count, "A").End(xlUp).Row + 1
        End If
    End If
    On Error Resume Next
    Set wsList = ThisWorkbook.Sheets("Lists")
    On Error GoTo ErrHandler
    If wsList Is Nothing Then GoTo EndMacro
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.Calculation = xlCalculationManual
    With wsList
        On Error Resume Next
        ConnectionName = .Range("nmConnectionName").Value
        If ConnectionName = "" Or Err.Number <> 0 Then GoTo EndMacro
        arrSheets = .Range("Hierarchy_Matrix").Value
        If Err.Number <> 0 Then GoTo EndMacro
        startIndex = .Range("nmStartIndex").Value
        If startIndex < 1 Then startIndex = 1
    End With
    totalRows = UBound(arrSheets) - LBound(arrSheets) + 1
    If startIndex > totalRows Then GoTo EndMacro
    rowsToProcess = chunkSize
    If startIndex + chunkSize - 1 > totalRows Then rowsToProcess = totalRows - (startIndex - 1)
    endIndex = startIndex + rowsToProcess - 1
    logSheet.Range("A" & logRow).Value = Now
    logSheet.Range("B" & logRow).Value = "ALL"
    logSheet.Range("C" & logRow).Value = "N/A"
    logSheet.Range("D" & logRow).Value = "Process Chunk"
    logSheet.Range("E" & logRow).Value = "INFO"
    logSheet.Range("F" & logRow).Value = "Connection: " & ConnectionName & " | Rows " & startIndex & " to " & endIndex
    logRow = logRow + 1
    For currentRow = startIndex To endIndex
        On Error Resume Next
        Set ws = ThisWorkbook.Worksheets(arrSheets(currentRow, 1))
        If ws Is Nothing Then
            logSheet.Range("A" & logRow).Value = Now
            logSheet.Range("B" & logRow).Value = arrSheets(currentRow, 1)
            logSheet.Range("D" & logRow).Value = "Sheet Check"
            logSheet.Range("E" & logRow).Value = "ERROR"
            logSheet.Range("F" & logRow).Value = "Sheet not found"
            logRow = logRow + 1
            GoTo SkipSheet
        End If
        On Error GoTo ErrHandler
        rangeName = Trim(arrSheets(currentRow, 2))
        If rangeName = "" Then
            logSheet.Range("A" & logRow).Value = Now
            logSheet.Range("B" & logRow).Value = ws.Name
            logSheet.Range("D" & logRow).Value = "Range Name Check"
            logSheet.Range("E" & logRow).Value = "ERROR"
            logSheet.Range("F" & logRow).Value = "Range name is empty"
            logRow = logRow + 1
            GoTo SkipSheet
        End If
        On Error Resume Next
        ThisWorkbook.Names(rangeName).Delete
        On Error GoTo ErrHandler
        With ws
            Ret = HypUIConnect(.Name, "", "", ConnectionName)
            ConnStatus = HypConnected(.Name)
            If ConnStatus <> -1 Then
                logSheet.Range("A" & logRow).Value = Now
                logSheet.Range("B" & logRow).Value = .Name
                logSheet.Range("C" & logRow).Value = rangeName
                logSheet.Range("D" & logRow).Value = "HypUIConnect"
                logSheet.Range("E" & logRow).Value = "ERROR"
                logSheet.Range("F" & logRow).Value = "Connection failed. Status: " & ConnStatus
                logRow = logRow + 1
                GoTo SkipSheet
            End If
            Application.SendKeys "~"
            LastRow = .Range("A" & .Rows.Count).End(xlUp).Row
            logSheet.Range("A" & logRow).Value = Now
            logSheet.Range("B" & logRow).Value = .Name
            logSheet.Range("C" & logRow).Value = rangeName
            logSheet.Range("D" & logRow).Value = "Before Delete"
            logSheet.Range("E" & logRow).Value = "INFO"
            logSheet.Range("F" & logRow).Value = "Last row: " & LastRow & ", Header: " & HeaderRow
            logRow = logRow + 1
            If LastRow > HeaderRow Then .Rows(HeaderRow & ":" & LastRow - 1).Delete Shift:=xlUp
            LastRow = .Range("A" & .Rows.Count).End(xlUp).Row
            Ret = HypSetSheetOption(.Name, HYP_SVC_OPTIONS_INDEX.HSV_MEMBER_DISPLAY, 1)
            Ret = HypZoomIn(.Name, .Range("A" & LastRow), 1, False)
            If Ret <> 0 Then
                logSheet.Range("A" & logRow).Value = Now
                logSheet.Range("B" & logRow).Value = .Name
                logSheet.Range("C" & logRow).Value = rangeName
                logSheet.Range("D" & logRow).Value = "HypZoomIn"
                logSheet.Range("E" & logRow).Value = "ERROR"
                logSheet.Range("F" & logRow).Value = "Zoom in failed. Code: " & Ret
                logRow = logRow + 1
                GoTo SkipSheet
            End If
            LastRow = .Range("A" & .Rows.Count).End(xlUp).Row
            If LastRow >= HeaderRow Then
                ThisWorkbook.Names.Add Name:=rangeName, RefersTo:=.Range("A" & HeaderRow & ":A" & LastRow)
                hierarchyArray = .Range("A" & HeaderRow & ":A" & LastRow).Value
                logSheet.Range("A" & logRow).Value = Now
                logSheet.Range("B" & logRow).Value = .Name
                logSheet.Range("C" & logRow).Value = rangeName
                logSheet.Range("D" & logRow).Value = "Processing Complete"
                logSheet.Range("E" & logRow).Value = "SUCCESS"
                logSheet.Range("F" & logRow).Value = "Items: " & (LastRow - HeaderRow + 1)
            Else
                logSheet.Range("A" & logRow).Value = Now
                logSheet.Range("B" & logRow).Value = .Name
                logSheet.Range("C" & logRow).Value = rangeName
                logSheet.Range("D" & logRow).Value = "Processing Complete"
                logSheet.Range("E" & logRow).Value = "WARNING"
                logSheet.Range("F" & logRow).Value = "Empty hierarchy"
            End If
            logRow = logRow + 1
            Erase hierarchyArray
        End With
SkipSheet:
    Next currentRow
    With logSheet
        .Columns("A:F").AutoFit
        .Range("A1:F" & logRow - 1).Sort Key1:=.Range("A1"), Order1:=xlDescending, Header:=xlYes
        .Range("E2:E" & logRow - 1).FormatConditions.Delete
        .Range("E2:E" & logRow - 1).FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="=""SUCCESS"""
        .Range("E2:E" & logRow - 1).FormatConditions(1).Interior.Color = RGB(198, 239, 206)
        .Range("E2:E" & logRow - 1).FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="=""WARNING"""
        .Range("E2:E" & logRow - 1).FormatConditions(2).Interior.Color = RGB(255, 235, 156)
        .Range("E2:E" & logRow - 1).FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="=""INFO"""
        .Range("E2:E" & logRow - 1).FormatConditions(3).Interior.Color = RGB(197, 217, 241)
        .Range("E2:E" & logRow - 1).FormatConditions.Add Type:=xlCellValue, Operator:=xlEqual, Formula1:="=""ERROR"""
        .Range("E2:E" & logRow - 1).FormatConditions(4).Interior.Color = RGB(255, 199, 206)
    End With
    wsList.Range("nmStartIndex").Value = endIndex + 1
    logSheet.Range("A" & logRow).Value = Now
    logSheet.Range("B" & logRow).Value = "ALL"
    logSheet.Range("D" & logRow).Value = "Chunk Completed"
    logSheet.Range("E" & logRow).Value = "INFO"
    logSheet.Range("F" & logRow).Value = "Processed rows " & startIndex & " to " & endIndex
    logRow = logRow + 1
EndMacro:
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    Application.Calculation = xlCalculationAutomatic
    logSheet.Range("A" & logRow).Value = Now
    logSheet.Range("B" & logRow).Value = "ALL"
    logSheet.Range("D" & logRow).Value = "Process End"
    logSheet.Range("E" & logRow).Value = "INFO"
    logSheet.Range("F" & logRow).Value = "Duration: " & Format(Timer - startTime, "0.00") & " seconds"
    logRow = logRow + 1
    logSheet.Activate
    Exit Sub
ErrHandler:
    logSheet.Range("A" & logRow).Value = Now
    If Not ws Is Nothing Then
        logSheet.Range("B" & logRow).Value = ws.Name
    Else
        logSheet.Range("B" & logRow).Value = "UNKNOWN"
    End If
    logSheet.Range("D" & logRow).Value = "Error"
    logSheet.Range("E" & logRow).Value = "ERROR"
    logSheet.Range("F" & logRow).Value = "Err " & Err.Number & ": " & Err.Description
    logRow = logRow + 1
    Resume EndMacro
End Sub
